{"name":"NCBIConnect","tagline":"JavaScript library for interfacing with National Center for Biotechnology Information's databases","body":"NCBIConnect.js\r\n==============\r\n\r\nIntroduction\r\n------------\r\n\r\nNCBIConnect.js is a client-side JavaScript library that provides a simple,\r\nhassle-free interface to some of the National Center for Biotechnology\r\nInformation's databases.\r\n\r\nRight now, the *nucleotide* (nuccore) and *protein* databases are supported\r\n(you can search for nucleic acid or protein sequences by name). Support\r\nfor gene data should arrive in the next build.\r\n\r\n\r\nPrimary Objective\r\n-----------------\r\n\r\nThe primary objective of this project is to encourage talented\r\nbioinformaticians and web developers to find more common ground and begin taking\r\nmore projects to the beautiful, dynamic, modern web with JavaScript.\r\n\r\nNCBIConnect can be used as a starting point to develop webapps that rely on\r\nNCBI's databases without having to set up a server environment - all\r\nprocessing is done client-side.\r\n\r\nNCBIConnect can also be used to write simple data collection scripts (in much\r\nfewer lines) that can be shared easily as .html files. No Perl required!\r\n\r\n(You can also consider writing your own data processing applications and\r\nscripts without having to save or load from local data!)\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nSimply download ```ncbiconnect.js``` and incorporate it into your webpage using:\r\n\r\n```html\r\n<script src=\"ncbiconnect.js\"></script>\r\n```\r\n\r\nVoila! (Make sure it's in the same directory, otherwise specify the relative\r\npath.)\r\n\r\n\r\nExample Usage\r\n-------------\r\n\r\nLet's say I'm interested in the genome of a specific virus. In this case, it's\r\nthe much-studied bacteriophage T4.\r\n\r\nI want to grab the top 5 hits from NCBI's nucleotide database for T4's genome,\r\nand store it in a single FASTA file.\r\n\r\nEasy!\r\n\r\n```javascript\r\nvar nucDB = new NCBIConnect('nucleotide');\r\n\r\nnucDB.query(\r\n   'Bacteriophage T4', // My search term\r\n   {'limit': 5, 'offset': 0}, // Give 5 results, starting at 0\r\n   function(err, result) {\r\n      if(err) { throw err; }\r\n\r\n      result.getFASTA(function(err, fasta) {\r\n         if(err) { throw err; }\r\n\r\n         fasta.save();\r\n\r\n      });\r\n\r\n   }\r\n);\r\n```\r\n\r\nAssuming we don't hit any errors with NCBI's servers, a file should\r\nautomatically be downloaded to our computer's ```Downloads``` folder when we run\r\nthis script.\r\n\r\n\r\n**What about listing results?**\r\n\r\nSimple!\r\n\r\n```javascript\r\nnucDB.query(\r\n   'Bacteriophage T4', // My search term\r\n   {'limit': 5, 'offset': 0}, // Give 5 results, starting at 0\r\n   function(err, result) {\r\n      if(err) { throw err; }\r\n      result.each(function(row) {\r\n         console.log(row.get('id') + ', ' + row.get('name'));\r\n      });\r\n   }\r\n);\r\n```\r\n\r\nWe now see a lovely output in our console:\r\n\r\n```javascript\r\n29366675, Enterobacteria phage T4, complete genome\r\n422934005, Enterobacteria phage Bp7, complete genome\r\n161622381, Enterobacteria phage JS98, complete genome\r\n291290213, Enterobacteria phage AR1 DNA, complete genome\r\n345450514, Enterobacteria phage Bp7, complete genome\r\n```\r\n\r\n\r\n**New to HTML?**\r\n\r\nYou may have written some Perl but you're unfamiliar with\r\nthrowing together a webpage. No problem! Included with this package is\r\n```index.html```, a sample index page containing the latter example above.\r\n\r\nIt will execute on page load so make sure you have your web console open to see\r\nit work!\r\n\r\nThere are also a number of useful methods to be used with results (and FASTA\r\nfiles). Explore them in the documentation!\r\n\r\n**Happy building!**\r\n\r\n\r\nDocumentation\r\n=============\r\n\r\n\r\nNCBIConnect.js contains the following objects:\r\n\r\n```NCBIConnect``` is the main connection object, it manages queries to NCBI's\r\nservers\r\n\r\n```NCBIConnectRow``` is a result row (from a query to NCBI's databases)\r\n\r\n```NCBIConnectSet``` is a set of ```NCBIConnectRow```s\r\n\r\n```NCBIConnectResult``` inherits from ```NCBIConnectSet``` and is the result\r\nobject that contains one or many results of a specific query from ```NCBIConnect```\r\n\r\n```NCBIConnectCollection``` inherits from ```NCBIConnectSet``` and can contain\r\nany collection of results from a number of queries\r\n\r\n```NCBIConnectFASTA``` is a special interface that provides some nifty tools for\r\ndealing with FASTA files\r\n\r\n\r\nNCBIConnect\r\n-----------\r\n\r\n### Constructor\r\n\r\nInstantiate using ```var myConn = new NCBIConnect('[database]')``` where\r\n*[database]* is one of: *nucleotide*, *protein*.\r\n\r\n\r\n### Methods\r\n\r\n**query**\r\n\r\n```javascript\r\nquery(\r\n   str_searchTerm,\r\n   obj_filters,\r\n   fn_callback [ context NCBIConnect, params [ Error, NCBIConnectResult ] ]\r\n)\r\n```\r\n\r\nSupported filters are ```limit``` to provide a max number of records to return,\r\nand ```offset``` to indicate which record to begin at.\r\n\r\n**queryFASTA**\r\n\r\n```javascript\r\nqueryFASTA(\r\n   str_id OR arr_idList,\r\n   str_fileIdentifier,\r\n   fn_callback [ context NCBIConnect, params [ Error, NCBIConnectFASTA ] ]\r\n)\r\n```\r\n\r\n```id``` is a specific gene identifier (Gi) or an array of them, and\r\n```fileIdentifer``` should be a unique string that can be used to identify the\r\nfile.\r\n\r\n**createCollection**\r\n\r\n```javascript\r\ncreateCollection()\r\n```\r\n\r\nCreates an empty ```NCBIConnectCollection``` which can then be used to store\r\nresult sets for future use.\r\n\r\n\r\nNCBIConnectRow\r\n--------------\r\n\r\n### Constructor\r\n\r\nInaccessible, created only as a result of a query from ```NCBIConnect```\r\n\r\n\r\n### Methods\r\n\r\n**set**\r\n\r\n```javascript\r\nset(\r\n   str_field,\r\n   var_value\r\n)\r\n```\r\n\r\nSets a given field of the row to a specific value.\r\n\r\n**get**\r\n\r\n```javascript\r\nget(\r\n   str_field,\r\n   var_defaultValue\r\n)\r\n```\r\n\r\nGets the value of the row associated with a specific field. If no value is\r\npresent, defaultValue is returned.\r\n\r\n**getFASTA**\r\n\r\n```javascript\r\ngetFASTA(\r\n   fn_callback [ context NCBIConnect, params [ Error, NCBIConnectFASTA ] ]\r\n)\r\n```\r\n\r\nAlias for ```NCBIConnect.queryFASTA``` for this specific result row.\r\n\r\n\r\nNCBIConnectSet\r\n--------------\r\n\r\n### Constructor\r\n\r\nInaccessible, created only as a result of selecting values from\r\n```NCBIConnectResult``` or ```NCBIConnectCollection```\r\n\r\n\r\n### Methods\r\n\r\n**each**\r\n\r\n```javascript\r\neach(\r\n   fn_callback [ context NCBIConnect, params [ NCBIConnectRow ] ]\r\n)\r\n```\r\n\r\nExecutes a provided callback function for each row in the set, starting with\r\nthe first result.\r\n\r\n**count**\r\n\r\n```javascript\r\ncount()\r\n```\r\n\r\nReturns the number of items in the set.\r\n\r\n**item**\r\n\r\n```javascript\r\nitem(\r\n   int_index\r\n)\r\n```\r\n\r\nReturns the item at ```index``` from the set (```NCBIConnectRow```).\r\n\r\n**first**\r\n\r\n```javascript\r\nfirst()\r\n```\r\n\r\nReturns the first item of the set. Throws an error if the set\r\nis empty.\r\n\r\n**last**\r\n\r\n```javascript\r\nlast()\r\n```\r\n\r\nReturns the last item of the set. Throws an error if the set is\r\nempty.\r\n\r\n**range**\r\n\r\n```javascript\r\nrange(\r\n   int_start,\r\n   int_end\r\n)\r\n```\r\n\r\nReturns ```NCBIConnectSet``` with values beginning at index ```start``` and\r\nending at index ```end``` (**inclusive**).\r\n\r\n**subset**\r\n\r\n```javascript\r\nsubset(\r\n   int_start,\r\n   int_length\r\n)\r\n```\r\n\r\nReturns ```NCBIConnectSet``` with values beginning at index ```start``` that is\r\n```length``` items long.\r\n\r\n**toArray**\r\n\r\n```javascript\r\ntoArray()\r\n```\r\n\r\nConverts the set into a native Array of native Objects. (These objects are *not*\r\ncopies! They contain referential row data.)\r\n\r\n**list**\r\n\r\n```javascript\r\nlist(\r\n   str_field\r\n)\r\n```\r\n\r\nReturns a native Array of all values associated with ```field``` for each\r\nrow in the set.\r\n\r\n**getFASTA**\r\n\r\n```javascript\r\ngetFASTA(\r\n   fn_callback [ context NCBIConnect, params [ Error, NCBIConnectFASTA ] ]\r\n)\r\n```\r\n\r\nAlias for ```NCBIConnect.queryFASTA``` for all rows in the set - returns\r\nan aggregated (multi-FASTA) file.\r\n\r\n\r\nNCBIConnectResult\r\n-----------------\r\n\r\n### Inherits\r\n\r\nThis Object inherits from ```NCBIConnectSet```\r\n\r\n\r\n### Constructor\r\n\r\nInaccessible, returned as a result of ```NCBIConnect.query```\r\n\r\n\r\nNCBIConnectCollection\r\n----------------------\r\n\r\n### Inherits\r\n\r\nThis Object inherits from ```NCBIConnectSet```\r\n\r\n\r\n### Constructor\r\n\r\nInaccessible, returned as a result of ```NCBIConnect.createCollection```\r\n\r\n\r\n### Methods\r\n\r\n**add**\r\n\r\n```javascript\r\nadd(\r\n   [NCBIConnectRow\r\n      or NCBIConnectSet\r\n      or NCBIConnectResult\r\n      or NCBIConnectCollection],\r\n   ...\r\n)\r\n```\r\n\r\nAccepts any number of arguments of the above specified kinds. Adds the rows from\r\nthese objects, in order, to the collection. Returns current collection.\r\n\r\n**remove**\r\n\r\n```javascript\r\nremove(\r\n   int_index\r\n)\r\n```\r\n\r\nRemoves the row at specified index from the current collection, and returns the\r\ncurrent collection.\r\n\r\n\r\nNCBIConnectFASTA\r\n----------------\r\n\r\n### Constructor\r\n\r\nInaccessible, returned as a result of ```NCBIConnect.queryFASTA```'s callback.\r\n\r\n\r\n### Methods\r\n\r\n**size**\r\n\r\n```javascript\r\nsize()\r\n```\r\n\r\nReturns the total size, in bytes, of the raw FASTA (or multiFASTA) file.\r\n\r\n**raw**\r\n\r\n```javascript\r\nraw()\r\n```\r\n\r\nReturns a string containing the raw FASTA (or multiFASTA) file.\r\n\r\n**data**\r\n\r\n```javascript\r\ndata(\r\n   opt_int_index\r\n)\r\n```\r\n\r\nIf ```index``` is supplied, provides a native Object containing both the header\r\n(comments) and content data of the FASTA file at the specified index (useful\r\nfor multiFASTA files). Otherwise provides a native Array containing all such\r\nObjects. (Single FASTA files will use an index of 0).\r\n\r\n**header**\r\n\r\n```javascript\r\nheader(\r\n   opt_int_index\r\n)\r\n```\r\n\r\nSimilar to ```data()```, but provides the specific header (comment) information\r\nfor FASTA file at specified index.\r\n\r\n**content**\r\n\r\n```javascript\r\ncontent(\r\n   opt_int_index\r\n)\r\n```\r\n\r\nSimilar to ```header```, but provides the specific content information\r\nfor FASTA file at specified index. (No whitespace.)\r\n\r\n**save**\r\n\r\n```javascript\r\nsave(\r\n   opt_str_name\r\n)\r\n```\r\n\r\nAutomatically saves the full FASTA or multiFASTA file to the user's\r\nbrowser-specified \"Downloads\" folder. If ```name``` is provided, it will\r\nattempt to save the file as ```name + '.seq'```, otherwise the name will be\r\nautomatically generated.\r\n\r\n\r\nThanks\r\n======\r\n\r\nThanks for checking out NCBIConnect.js :)\r\n\r\nYou can check out my other projects on my GitHub account:\r\nhttp://github.com/keithwhor\r\n\r\nView my personal website at:\r\nhttp://keithwhor.com\r\n\r\nOr follow me on Twitter:\r\n@keithwhor\r\nhttp://twitter.com/keithwhor\r\n\r\nCheers!\r\n","google":"UA-44899638-6","note":"Don't delete this file! It's used internally to help with page regeneration."}